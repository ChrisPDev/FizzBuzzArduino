@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System;
@using System.Collections.Generic;
@using System.Threading.Tasks;
@using System.Security.Cryptography

<h3>Modal Login Account</h3>

<p>Create an account, to watch the FizzBuzz leaderboard</p>

<p id="StatusMsg" @ref="statusMsg"></p>
<p id="ApiStatusMsg" @ref="apiStatusMsg"></p>

<input id="UNameCreate" type="text" placeholder="Username" @bind="username" required />
<input id="PWordCreate" type="password" placeholder="Password" @bind="password" required />
<input id="SubmitCreate" type="button" value="Login" @onclick="CreateAccount" />

<script>
    window.setElementText = (element, text) => {
        element.innerText = text;
    };
</script>

@code {
    private string username { get; set; }
    private string password { get; set; }
    private ElementReference statusMsg;
    private ElementReference apiStatusMsg;

    [Inject]
    IJSRuntime JS { get; set; }

    private async Task CreateAccount()
    {
        if (!string.IsNullOrEmpty(username) && !string.IsNullOrEmpty(password))
        {
            // Add login functionality

            await JS.InvokeVoidAsync("setElementText", statusMsg, "Logged on successfully!");

            username = string.Empty;
            password = string.Empty;

            StateHasChanged();
        }
        else
        {
            await JS.InvokeVoidAsync("setElementText", statusMsg, "Please fill in all fields.");
        }
    }

    

    private static string HashPassword(string password, byte[] salt)
    {
        using (var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 10000, HashAlgorithmName.SHA256))
        {
            byte[] hashBytes = pbkdf2.GetBytes(32);
            return Convert.ToBase64String(hashBytes);
        }
    }

    public class User
    {
        public string Username { get; set; }
        public string HashPass { get; set; }
        public string Salt { get; set; }
    }
}
