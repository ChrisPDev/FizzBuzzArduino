@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System;
@using System.Collections.Generic;
@using System.Threading.Tasks;
@using System.Security.Cryptography

<h3>Modal Login Account</h3>

<p>Log on your account, to manage the FizzBuzz leaderboard</p>

<p id="StatusMsg" @ref="statusMsgLogin"></p>
<p id="ApiStatusMsg" @ref="apiStatusMsgLogin"></p>
<p id="ValidateStatusMsg" @ref="validateStatusMsgLogin"></p>

<input id="UNameLogin" type="text" placeholder="Username" @bind="username" required />
<input id="PWordLogin" type="password" placeholder="Password" @bind="password" required />
<input id="SubmitLogin" type="button" value="Login" @onclick="LoginAccount" />

<script>
    window.setElementText = (element, text) => {
        element.innerText = text;
    };
</script>

@code {
    private string username { get; set; }
    private string password { get; set; }
    private ElementReference statusMsgLogin;
    private ElementReference apiStatusMsgLogin;
    private ElementReference validateStatusMsgLogin;

    [Inject]
    IJSRuntime JS { get; set; }

    private async Task LoginAccount()
    {
        if (!string.IsNullOrEmpty(username) && !string.IsNullOrEmpty(password))
        {
            User user = await GetUserByUsernameAsync(username);

            byte[] salt = Convert.FromBase64String(user.Salt);
            string dbUserPass = user.HashPass;
            string inputUserPass = HashPassword(password, salt);

            if (user != null)
            {
                if (inputUserPass == dbUserPass)
                {
                    await JS.InvokeVoidAsync("setElementText", statusMsgLogin, "Logged on successfully!");
                }
                else
                {
                    await JS.InvokeVoidAsync("setElementText", statusMsgLogin, "Failed to login!");
                }
            }
            else
            {
                await JS.InvokeVoidAsync("setElementText", statusMsgLogin, "Login failed due to API related error!");
            }

            username = string.Empty;
            password = string.Empty;

            StateHasChanged();
        }
        else
        {
            await JS.InvokeVoidAsync("setElementText", statusMsgLogin, "Please fill in all fields.");
        }
    }

    public async Task<User> GetUserByUsernameAsync(string username)
    {
        using (HttpClient client = new HttpClient())
        {
            var response = await client.GetAsync($"https://fizzbuzzarduino.onrender.com/api/User/username/{username}");
            response.EnsureSuccessStatusCode();

            await JS.InvokeVoidAsync("setElementText", apiStatusMsgLogin, response.IsSuccessStatusCode.ToString());
            return await response.Content.ReadFromJsonAsync<User>();
        }
    }    

    private static string HashPassword(string password, byte[] salt)
    {
        using (var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 10000, HashAlgorithmName.SHA256))
        {
            byte[] hashBytes = pbkdf2.GetBytes(32);
            return Convert.ToBase64String(hashBytes);
        }
    }

    public class User
    {
        public string Username { get; set; }
        public string HashPass { get; set; }
        public string Salt { get; set; }
    }
}
